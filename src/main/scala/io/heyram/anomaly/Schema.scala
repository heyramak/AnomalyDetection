package io.heyram.anomaly

import org.apache.spark.sql.types._


object Schema {


  val transactionStructureName = "transaction"

  val transactionSchema = new StructType()
    .add(Enums.TransactionKafka.id, StringType, true)
    .add(Enums.TransactionKafka.trans_time, StringType, true)
    .add(Enums.TransactionKafka.duration, DoubleType, true)
    .add(Enums.TransactionKafka.protocol_type, StringType, true)
    .add(Enums.TransactionKafka.service, StringType, true)
    .add(Enums.TransactionKafka.flag, StringType, true)
    .add(Enums.TransactionKafka.src_bytes, DoubleType, true)
    .add(Enums.TransactionKafka.dst_bytes, DoubleType, true)
    .add(Enums.TransactionKafka.land, DoubleType, true)
    .add(Enums.TransactionKafka.wrong_fragment, DoubleType, true)
    .add(Enums.TransactionKafka.urgent, DoubleType, true)
    .add(Enums.TransactionKafka.hot, DoubleType, true)
    .add(Enums.TransactionKafka.num_failed_logins, DoubleType, true)
    .add(Enums.TransactionKafka.logged_in, DoubleType, true)
    .add(Enums.TransactionKafka.num_compromised, DoubleType, true)
    .add(Enums.TransactionKafka.root_shell, DoubleType, true)
    .add(Enums.TransactionKafka.su_attempted, DoubleType, true)
    .add(Enums.TransactionKafka.num_root, DoubleType, true)
    .add(Enums.TransactionKafka.num_file_creations, DoubleType, true)
    .add(Enums.TransactionKafka.num_shells, DoubleType, true)
    .add(Enums.TransactionKafka.num_access_files, DoubleType, true)
    .add(Enums.TransactionKafka.num_outbound_cmds, DoubleType, true)
    .add(Enums.TransactionKafka.is_host_login, DoubleType, true)
    .add(Enums.TransactionKafka.is_guest_login, DoubleType, true)
    .add(Enums.TransactionKafka.count, DoubleType, true)
    .add(Enums.TransactionKafka.srv_count, DoubleType, true)
    .add(Enums.TransactionKafka.serror_rate, DoubleType, true)
    .add(Enums.TransactionKafka.srv_serror_rate, DoubleType, true)
    .add(Enums.TransactionKafka.rerror_rate, DoubleType, true)
    .add(Enums.TransactionKafka.srv_rerror_rate, DoubleType, true)
    .add(Enums.TransactionKafka.same_srv_rate, DoubleType, true)
    .add(Enums.TransactionKafka.diff_srv_rate, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_count, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_srv_count, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_same_srv_rate, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_diff_srv_rate, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_same_src_port_rate, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_srv_diff_host_rate, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_serror_rate, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_srv_serror_rate, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_rerror_rate, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_srv_rerror_rate, DoubleType, true)

  /* Transaction  Schema used while importing transaction data to Cassandra*/
  val fruadCheckedTransactionSchema = transactionSchema.add(Enums.TransactionKafka.xAttack, StringType, true)


  /* Schema of transaction msgs received from Kafka. Json msg is received from Kafka. Hence evey field is treated as String */
  val kafkaTransactionStructureName = transactionStructureName
  val kafkaTransactionSchema = new StructType()
    .add(Enums.TransactionKafka.id, StringType, true)
    .add(Enums.TransactionKafka.trans_time, StringType, true)
    .add(Enums.TransactionKafka.duration, DoubleType, true)
    .add(Enums.TransactionKafka.protocol_type, StringType, true)
    .add(Enums.TransactionKafka.service, StringType, true)
    .add(Enums.TransactionKafka.flag, StringType, true)
    .add(Enums.TransactionKafka.src_bytes, DoubleType, true)
    .add(Enums.TransactionKafka.dst_bytes, DoubleType, true)
    .add(Enums.TransactionKafka.land, DoubleType, true)
    .add(Enums.TransactionKafka.wrong_fragment, DoubleType, true)
    .add(Enums.TransactionKafka.urgent, DoubleType, true)
    .add(Enums.TransactionKafka.hot, DoubleType, true)
    .add(Enums.TransactionKafka.num_failed_logins, DoubleType, true)
    .add(Enums.TransactionKafka.logged_in, DoubleType, true)
    .add(Enums.TransactionKafka.num_compromised, DoubleType, true)
    .add(Enums.TransactionKafka.root_shell, DoubleType, true)
    .add(Enums.TransactionKafka.su_attempted, DoubleType, true)
    .add(Enums.TransactionKafka.num_root, DoubleType, true)
    .add(Enums.TransactionKafka.num_file_creations, DoubleType, true)
    .add(Enums.TransactionKafka.num_shells, DoubleType, true)
    .add(Enums.TransactionKafka.num_access_files, DoubleType, true)
    .add(Enums.TransactionKafka.num_outbound_cmds, DoubleType, true)
    .add(Enums.TransactionKafka.is_host_login, DoubleType, true)
    .add(Enums.TransactionKafka.is_guest_login, DoubleType, true)
    .add(Enums.TransactionKafka.count, DoubleType, true)
    .add(Enums.TransactionKafka.srv_count, DoubleType, true)
    .add(Enums.TransactionKafka.serror_rate, DoubleType, true)
    .add(Enums.TransactionKafka.srv_serror_rate, DoubleType, true)
    .add(Enums.TransactionKafka.rerror_rate, DoubleType, true)
    .add(Enums.TransactionKafka.srv_rerror_rate, DoubleType, true)
    .add(Enums.TransactionKafka.same_srv_rate, DoubleType, true)
    .add(Enums.TransactionKafka.diff_srv_rate, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_count, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_srv_count, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_same_srv_rate, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_diff_srv_rate, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_same_src_port_rate, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_srv_diff_host_rate, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_serror_rate, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_srv_serror_rate, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_rerror_rate, DoubleType, true)
    .add(Enums.TransactionKafka.dst_host_srv_rerror_rate, DoubleType, true)

}
